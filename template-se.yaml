# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# [START anthos_config_management_security_encryption]
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8ssecretsencriptvalidation
spec:
  crd:
    spec:
      names:
        kind: K8sSecretsEncriptValidation
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            secretsEncryption:
              type: object
              properties:
                mode: string
                generatedKey: object
                  properties:
                    keyVersion: number
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8ssecretsencriptvalidation
        get_message(parameters, _default) = msg {
          not parameters.message
          msg := _default
        }
        get_message(parameters, _default) = msg {
          msg := parameters.message
        }
        violation[{"msg": msg, "details": {"missing_labels": missing}}] {
          provided := {seKeyVersion | input.review.object.secretsEncryption}
          required := {seKeyVersion | seKeyVersion := input.parameters.secretsEncryption}
          missing := required - provided
          count(missing) > 0
          def_msg := sprintf("you must provide secret encryption: %v", [missing])
          msg := get_message(input.parameters, def_msg)
        }
        violation[{"msg": msg}] {
          value := input.review.object.secretsEncryption.generatedKey.keyVersion
          expected := input.parameters.secretsEncryption.generatedKey.keyVersion
          
          # do not match if allowedRegex is not defined, or is an empty string
          expected.allowedRegex != ""
          not re_match(expected.allowedRegex, value)
          def_msg := sprintf("Keyversion does not satisfy allowed regex, it must be some numeric not blank")
          msg := get_message(input.parameters, def_msg)
        }